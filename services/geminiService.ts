import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

function fileToGenerativePart(base64Data: string) {
    const match = base64Data.match(/^data:(image\/(?:jpeg|png|webp));base64,(.*)$/);
    if (!match) {
        throw new Error('Invalid base64 string for image');
    }
    const mimeType = match[1];
    const data = match[2];

    return {
        inlineData: {
            data,
            mimeType,
        },
    };
}

export type ViewAngle = 'front' | 'side' | 'back';

export const applyHairstyle = async (
    base64Image: string,
    hairstylePrompt: string,
    viewAngle: ViewAngle = 'front'
): Promise<string> => {
    const imagePart = fileToGenerativePart(base64Image);
    
    let textPart;

    if (viewAngle === 'back') {
        textPart = {
            text: `Change the hairstyle of the person in the image to ${hairstylePrompt}, as viewed from the back. The final image must only show the back of the person's head with the new hairstyle. Do not show the person's face or any facial features. The background should remain consistent with the original image.`
        };
    } else {
        let viewInstruction = '';
        if (viewAngle === 'side') {
            viewInstruction = ', as viewed from a side profile';
        }
        textPart = {
            text: `Change the hairstyle of the person in the image to ${hairstylePrompt}${viewInstruction}. Ensure the result is photorealistic and seamlessly blends with the person's head and face. Do not change the person's facial features or the background.`
        };
    }


    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [imagePart, textPart],
        },
        config: {
            responseModalities: [Modality.IMAGE],
        },
    });

    const candidate = response?.candidates?.[0];

    // Validate the response before trying to access its properties
    if (!candidate || !candidate.content || !candidate.content.parts) {
        const finishReason = candidate?.finishReason;
        const safetyRatings = candidate?.safetyRatings;
        console.error('Image generation failed.', { finishReason, safetyRatings });
        throw new Error(`Image generation failed. The request may have been blocked. Reason: ${finishReason || 'Unknown'}.`);
    }


    for (const part of candidate.content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
        }
    }

    throw new Error("No image was generated by the API.");
};

export const generateRandomHairstylePrompt = async (existingPrompts: string[]): Promise<string> => {
    const prompt = `Generate a short, descriptive prompt for a creative, stylish, and unique hairstyle. The hairstyle should be suitable for a virtual try-on app. 
    Do not use any of the following examples in your response: ${existingPrompts.join(', ')}.
    The prompt should be a concise phrase, like 'a fiery red mohawk with shaved sides' or 'long, flowing silver hair with gentle waves'.
    Return only the prompt text and nothing else.`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
    });
    
    return response.text.trim();
};